#!/usr/bin/env python3
"""
CleanWay Telegram Bot - Main Entry Point for Render
"""
import asyncio
import logging
import os
import sys
from pathlib import Path
from threading import Thread
import time

# –î–æ–¥–∞—î–º–æ bot –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ Python path
bot_dir = Path(__file__).parent / "bot"
sys.path.insert(0, str(bot_dir))

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
from handlers import main_handlers, catalog_handlers, cart_handlers, ai_handlers, order_handlers
from utils.database import init_db

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
env_path = bot_dir / ".env"
if env_path.exists():
    load_dotenv(env_path)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Keep-alive –≤–µ–± —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
def keep_alive():
    """–ü—Ä–æ—Å—Ç–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ Render"""
    from flask import Flask
    
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return '''
        <html>
        <head><title>CleanWay Bot Status</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
            <h1>ü§ñ CleanWay Telegram Bot</h1>
            <p>‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!</p>
            <p>üïí –ß–∞—Å: ''' + time.strftime('%Y-%m-%d %H:%M:%S') + '''</p>
        </body>
        </html>
        '''
    
    @app.route('/health')
    def health():
        return {'status': 'ok', 'bot': 'running'}
    
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        logger.error("–î–æ–¥–∞–π—Ç–µ BOT_TOKEN –≤ Environment Variables –Ω–∞ Render")
        return
    
    logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ CleanWay –±–æ—Ç–∞...")
    logger.info(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")
    logger.info(f"üîß Bot –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {bot_dir}")
    logger.info(f"üêç Python –≤–µ—Ä—Å—ñ—è: {sys.version}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    dp = Dispatcher()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä—ñ–≤
        dp.include_router(main_handlers.router)
        dp.include_router(catalog_handlers.router)
        dp.include_router(cart_handlers.router)
        dp.include_router(ai_handlers.router)
        dp.include_router(order_handlers.router)
        
        logger.info("‚úÖ –†–æ—É—Ç–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Telegram —è–∫ @{bot_info.username}")
        
        # –ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        server_thread = Thread(target=keep_alive, daemon=True)
        server_thread.start()
        logger.info("‚úÖ Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ")
        
        logger.info("üöÄ CleanWay –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await bot.session.close()
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()