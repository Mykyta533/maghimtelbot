"""AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π"""
import os
import google.generativeai as genai
from typing import Optional
from .catalog import search_products, get_all_categories

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))

# –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
SYSTEM_PROMPT = """
–í–∏ - —Ç—É—Ä–±–æ—Ç–ª–∏–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω—É –ø–æ–±—É—Ç–æ–≤–æ—ó —Ö—ñ–º—ñ—ó CleanWay –≤ –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ. 

–í–∞—à–∞ –º–µ—Ç–∞ - –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —ó—Ö–Ω—ñ—Ö –ø–æ—Ç—Ä–µ–± —É –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—ñ —Ç–∞ –≥—ñ–≥—ñ—î–Ω—ñ.

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–æ—ó –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó:
- –¢—É—Ä–±–æ—Ç–ª–∏–≤–∏–π —Ç–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —Ç–æ–Ω
- –§–æ–∫—É—Å –Ω–∞ –∑–¥–æ—Ä–æ–≤'—ó —Ä–æ–¥–∏–Ω–∏ —Ç–∞ –±–µ–∑–ø–µ—Ü—ñ
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
- –ó–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É

–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω—É:
- –ó–∞—Å–æ–±–∏ –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è (–ø—ñ–¥–ª–æ–≥–∞, —Å–∫–ª–æ, –ø–æ–≤–µ—Ä—Ö–Ω—ñ)
- –ì—ñ–≥—ñ—î–Ω—ñ—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏ (–º–∏–ª–æ, —à–∞–º–ø—É–Ω—ñ, –¥–µ–∑—ñ–Ω—Ñ–µ–∫—Ç–æ—Ä–∏)
- –ú–∏—é—á—ñ –∑–∞—Å–æ–±–∏ –¥–ª—è –ø–æ—Å—É–¥—É
- –ü–æ–±—É—Ç–æ–≤—ñ –¥—Ä—ñ–±–Ω–∏—Ü—ñ (–≥—É–±–∫–∏, —Å–µ—Ä–≤–µ—Ç–∫–∏, —Ä—É–∫–∞–≤–∏—á–∫–∏)

–ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Ç–∞ –±—É–¥—å—Ç–µ –∫–æ—Ä–∏—Å–Ω–∏–º–∏!
"""

async def process_text_query(query: str, user_id: int) -> str:
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ Gemini"""
    try:
        model = genai.GenerativeModel('gemini-pro')
        
        # –®—É–∫–∞—î–º–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏
        relevant_products = search_products(query)
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
        products_context = ""
        if relevant_products:
            products_context = "\n\n–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ:\n"
            for product in relevant_products[:3]:  # –ë–µ—Ä–µ–º–æ —Ç–æ–ø-3 —Ç–æ–≤–∞—Ä–∏
                products_context += f"- {product['name']}: {product['description']} - {product['price']} –≥—Ä–Ω\n"
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        full_prompt = f"{SYSTEM_PROMPT}\n\n–ó–∞–ø–∏—Ç –∫–ª—ñ—î–Ω—Ç–∞: {query}{products_context}\n\n–î–∞–π—Ç–µ –∫–æ—Ä–∏—Å–Ω—É –ø–æ—Ä–∞–¥—É —Ç–∞ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ —Ç–æ–≤–∞—Ä–∏:"
        
        response = model.generate_content(full_prompt)
        
        if response.text:
            return response.text
        else:
            return get_fallback_response(query)
            
    except Exception as e:
        return get_fallback_response(query)

async def process_voice_query(query: str, user_id: int) -> str:
    """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É)"""
    return await process_text_query(query, user_id)

def get_fallback_response(query: str) -> str:
    """–†–µ–∑–µ—Ä–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ AI"""
    # –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['–¥–∑–µ—Ä–∫–∞–ª–æ', '—Å–∫–ª–æ', '–≤—ñ–∫–Ω–æ']):
        return (
            "ü™ü –î–ª—è –º–∏—Ç—Ç—è –¥–∑–µ—Ä–∫–∞–ª —Ç–∞ —Å–∫–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
            "‚ú® –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–∞—Å–æ–±–∏ –¥–ª—è —Å–∫–ª–∞\n"
            "üßΩ –ú–∏–π—Ç–µ –∫—Ä—É–≥–æ–≤–∏–º–∏ —Ä—É—Ö–∞–º–∏, –ø–æ—Ç—ñ–º –ø—Ä–æ—Ç–∏—Ä–∞–π—Ç–µ –Ω–∞—Å—É—Ö–æ\n"
            "üì∞ –î–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É - –≥–∞–∑–µ—Ç–Ω–∏–π –ø–∞–ø—ñ—Ä\n\n"
            "üí° –ü–æ—Ä–∞–¥–∞: –º–∏–π—Ç–µ —Å–∫–ª–æ –≤ –ø–æ—Ö–º—É—Ä—É –ø–æ–≥–æ–¥—É - –≤–æ–Ω–æ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ —Å–æ—Ö–Ω–µ —ñ –Ω–µ –∑–∞–ª–∏—à–∞—î —Ä–æ–∑–≤–æ–¥—ñ–≤!"
        )
    
    elif any(word in query_lower for word in ['–ø—ñ–¥–ª–æ–≥–∞', '–º–∏—Ç—Ç—è', '–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è']):
        return (
            "üè† –î–ª—è –º–∏—Ç—Ç—è –ø—ñ–¥–ª–æ–≥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
            "üßº –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ pH-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –∑–∞—Å–æ–±–∏\n"
            "üíß –ù–µ –∑–∞–ª–∏–≤–∞–π—Ç–µ –ø—ñ–¥–ª–æ–≥—É - –≤–æ–ª–æ–≥–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –∫—Ä–∞—â–µ\n"
            "üßΩ –†—ñ–∑–Ω—ñ –ø–æ–≤–µ—Ä—Ö–Ω—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Ä—ñ–∑–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤\n\n"
            "üë∂ –î–ª—è —Ä–æ–¥–∏–Ω –∑ –¥—ñ—Ç—å–º–∏ - –æ–±–∏—Ä–∞–π—Ç–µ –≥—ñ–ø–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω—ñ –∑–∞—Å–æ–±–∏!"
        )
    
    elif any(word in query_lower for word in ['–¥–∏—Ç–∏–Ω–∞', '–±–µ–∑–ø–µ—á–Ω', '–∞–ª–µ—Ä–≥—ñ']):
        return (
            "üë∂ –î–ª—è —Ä–æ–¥–∏–Ω –∑ –¥—ñ—Ç—å–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
            "üåø –ï–∫–æ–ª–æ–≥—ñ—á–Ω—ñ –∑–∞—Å–æ–±–∏ –±–µ–∑ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—ó —Ö—ñ–º—ñ—ó\n"
            "üè∑  –®—É–∫–∞–π—Ç–µ –ø–æ–∑–Ω–∞—á–∫–∏ '–≥—ñ–ø–æ–∞–ª–µ—Ä–≥–µ–Ω–Ω–æ'\n"
            "üö´ –£–Ω–∏–∫–∞–π—Ç–µ –∑–∞—Å–æ–±—ñ–≤ –∑ —Å–∏–ª—å–Ω–∏–º –∑–∞–ø–∞—Ö–æ–º\n\n"
            "üíö –ó–¥–æ—Ä–æ–≤'—è –≤–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ - –Ω–∞—à –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç!"
        )
    
    else:
        return (
            "üòä –î—è–∫—É—é –∑–∞ –≤–∞—à –∑–∞–ø–∏—Ç!\n\n"
            "–Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ —â–æ–¥–æ:\n"
            "üßº –ó–∞—Å–æ–±—ñ–≤ –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è\n"
            "üß¥ –ì—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤\n"
            "üçΩ –ú–∏—Ç—Ç—è –ø–æ—Å—É–¥—É\n"
            "üè† –î–æ–≥–ª—è–¥—É –∑–∞ –¥–æ–º–æ–º\n\n"
            "–ü–æ—Å—Ç–∞–≤—Ç–µ –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ—Ä–∞–¥—É!"
        )