import os
import asyncio
from aiogram import Router, F
from aiogram.types import Message, Voice
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.main_keyboards import get_back_to_menu_keyboard
from utils.ai_assistant import process_text_query, process_voice_query
from utils.voice_processing import voice_to_text, text_to_voice

router = Router()

class AIStates(StatesGroup):
    waiting_query = State()
    choosing_mode = State()

@router.message(F.text == "ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫")
async def start_ai_assistant(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí¨ –¢–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º", callback_data="ai_text_mode"),
                InlineKeyboardButton(text="üéô –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º", callback_data="ai_voice_mode")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            ]
        ]
    )
    
    await message.answer(
        "ü§ñ <b>AI-–ø–æ–º—ñ—á–Ω–∏–∫ CleanWay</b>\n\n"
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑ –ø–∏—Ç–∞–Ω—å –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ –≥—ñ–≥—ñ—î–Ω–∏.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:\n\n"
        "üí¨ <b>–¢–µ–∫—Å—Ç–æ–≤–∏–π</b> - –ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–º\n"
        "üéô <b>–ì–æ–ª–æ—Å–æ–≤–∏–π</b> - –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç–∞–Ω—å:\n"
        "‚Ä¢ –ß–∏–º –∫—Ä–∞—â–µ –º–∏—Ç–∏ –¥–∑–µ—Ä–∫–∞–ª–∞ –±–µ–∑ —Ä–æ–∑–≤–æ–¥—ñ–≤?\n"
        "‚Ä¢ –Ø–∫–∏–π –∑–∞—Å—ñ–± –ø—ñ–¥—ñ–π–¥–µ –¥–ª—è —á—É—Ç–ª–∏–≤–æ—ó —à–∫—ñ—Ä–∏?\n"
        "‚Ä¢ –Ø–∫ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–ª—è–º–∏ –∑ –∫–∏–ª–∏–º–∞?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(AIStates.choosing_mode)

@router.callback_query(F.data == "ai_text_mode")
async def start_text_mode(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É"""
    await state.update_data(mode="text")
    await state.set_state(AIStates.waiting_query)
    
    await callback.message.edit_text(
        "üí¨ <b>–¢–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ—Ä–∞–¥—É —Ç–∞ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—ñ–¥—Ö–æ–¥—è—â—ñ —Ç–æ–≤–∞—Ä–∏! üòä",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "ai_voice_mode")
async def start_voice_mode(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É"""
    await state.update_data(mode="voice")
    await state.set_state(AIStates.waiting_query)
    
    await callback.message.edit_text(
        "üéô <b>–ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º AI-–ø–æ–º—ñ—á–Ω–∏–∫–∞</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º, —ñ —è:\n"
        "‚Ä¢ –†–æ–∑–ø—ñ–∑–Ω–∞—é –≤–∞—à—É –º–æ–≤—É\n"
        "‚Ä¢ –î–∞–º –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n"
        "‚Ä¢ –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–æ–≤–∞—Ä–∏\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–º –≥–æ–ª–æ—Å–æ–º\n\n"
        "–ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —Ç–∞ –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π—Ç–µ! üéØ",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.message(AIStates.waiting_query, F.text)
async def handle_text_query(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ AI"""
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é":
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ, —â–æ –±–æ—Ç –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç
    processing_msg = await message.answer("ü§î –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç...")
    
    try:
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ AI
        response = await process_text_query(message.text, message.from_user.id)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await processing_msg.delete()
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await message.answer(
            response,
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        await processing_msg.delete()
        await message.answer(
            "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.message(AIStates.waiting_query, F.voice)
async def handle_voice_query(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ AI"""
    data = await state.get_data()
    mode = data.get('mode', 'voice')
    
    if mode != 'voice':
        await message.answer(
            "üí¨ –í–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    processing_msg = await message.answer("üéô –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        voice_file = await message.bot.get_file(message.voice.file_id)
        voice_path = f"temp_voice_{message.from_user.id}.ogg"
        
        await message.bot.download_file(voice_file.file_path, voice_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≥–æ–ª–æ—Å —É —Ç–µ–∫—Å—Ç
        await processing_msg.edit_text("üîÑ –†–æ–∑–ø—ñ–∑–Ω–∞—é –º–æ–≤—É...")
        text_query = await voice_to_text(voice_path)
        
        if not text_query:
            await processing_msg.delete()
            await message.answer(
                "üòî –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –≥–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫—ñ—à–µ.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
        await processing_msg.edit_text(f"‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: \"{text_query}\"\n\nü§ñ –ì–æ—Ç—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ AI
        response = await process_voice_query(text_query, message.from_user.id)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await processing_msg.delete()
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await message.answer(
            f"üéô <b>–í–∞—à –∑–∞–ø–∏—Ç:</b> {text_query}\n\n"
            f"ü§ñ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n{response}",
            reply_markup=get_back_to_menu_keyboard()
        )
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        voice_response_path = await text_to_voice(response, message.from_user.id)
        if voice_response_path and os.path.exists(voice_response_path):
            with open(voice_response_path, 'rb') as voice_file:
                await message.answer_voice(
                    voice_file,
                    caption="üîä –ì–æ–ª–æ—Å–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                )
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            os.remove(voice_response_path)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
        if os.path.exists(voice_path):
            os.remove(voice_path)
            
    except Exception as e:
        await processing_msg.delete()
        await message.answer(
            "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º.",
            reply_markup=get_back_to_menu_keyboard()
        )
        
        # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        if os.path.exists(voice_path):
            os.remove(voice_path)

@router.message(AIStates.waiting_query)
async def invalid_text_input(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É"""
    await message.answer(
        "üí¨ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É).\n\n"
        "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é\" –¥–ª—è –≤–∏—Ö–æ–¥—É.",
        reply_markup=get_back_to_menu_keyboard()
    )