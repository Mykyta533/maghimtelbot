from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.main_keyboards import get_main_menu, get_back_to_menu_keyboard
from utils.messages import WELCOME_MESSAGE, CONTACT_INFO
from utils.cart import get_user_cart, get_cart_total
from utils.database import update_user_data, get_user_data
from keyboards.cart_keyboards import get_checkout_keyboard

router = Router()

class UserRegistrationState(StatesGroup):
    waiting_for_phone = State()

class UserProfileState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_name = State()
    waiting_for_address = State()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start - –∑–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    await state.clear()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "üëã <b>–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ CleanWay</b>\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞—Ç–∏ –≤–∞—Å —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω—å.",
        reply_markup=phone_keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(UserRegistrationState.waiting_for_phone)

@router.message(UserRegistrationState.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data = {
        'phone': phone_number,
        'first_name': message.from_user.first_name or '',
        'last_name': message.from_user.last_name or '',
        'username': message.from_user.username or ''
    }
    update_user_data(user_id, user_data)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    import os
    admin_id = int(os.getenv('ADMIN_ID', '8095681158'))
    
    admin_text = (
        "üë§ <b>–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!</b>\n\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ –Ü–º'—è: {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–æ'} {message.from_user.last_name or ''}\n"
        f"üì± Username: @{message.from_user.username or '–Ω–µ–º–∞—î'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}"
    )
    
    try:
        await message.bot.send_message(chat_id=admin_id, text=admin_text, parse_mode="HTML")
        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@router.message(UserRegistrationState.waiting_for_phone)
async def invalid_phone_input(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º\" –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤–∞—à–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        reply_markup=phone_keyboard
    )

@router.message(F.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    await state.clear()
    
    await message.answer(
        "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def contact_info(message: Message):
    """–ü–æ–≤–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"""
    await message.answer(
        CONTACT_INFO,
        reply_markup=get_back_to_menu_keyboard(),
        parse_mode="HTML"
    )

@router.message(F.text == "üë§ –ú–æ—î")
async def my_profile(message: Message, state: FSMContext):
    """–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    current_phone = user_data.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    current_name = user_data.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    current_address = user_data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    
    profile_text = (
        "üë§ <b>–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {current_phone}\n"
        f"üë§ –Ü–º'—è: {current_name}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {current_address}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
    )
    
    await message.answer(
        profile_text,
        reply_markup=get_back_to_menu_keyboard(),
        parse_mode="HTML"
    )
    
    await state.set_state(UserProfileState.waiting_for_phone)

@router.message(UserProfileState.waiting_for_phone)
async def update_phone(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone = message.text.strip()
    
    if not phone or phone == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    await state.update_data(phone=phone)
    
    await message.answer(
        "üë§ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    await state.set_state(UserProfileState.waiting_for_name)

@router.message(UserProfileState.waiting_for_name)
async def update_name(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ"""
    name = message.text.strip()
    
    if not name or name == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    await state.update_data(name=name)
    
    await message.answer(
        "üìç –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ –ù–æ–≤–∞ –ü–æ—à—Ç–∞ ‚Ññ5, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å\n"
        "‚Ä¢ –£–∫—Ä–ø–æ—à—Ç–∞, –≤—É–ª. –†—É—Å—å–∫–∞ 10, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å\n"
        "‚Ä¢ –°–∞–º–æ–≤–∏–≤—ñ–∑ –∑ –º–∞–≥–∞–∑–∏–Ω—É",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    await state.set_state(UserProfileState.waiting_for_address)

@router.message(UserProfileState.waiting_for_address)
async def update_address(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
    address = message.text.strip()
    
    if not address or address == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()
    phone = data.get('phone')
    name = data.get('name')
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = message.from_user.id
    update_user_data(user_id, {
        'phone': phone,
        'name': name,
        'address': address
    })
    
    await state.clear()
    
    success_text = (
        "‚úÖ <b>–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üë§ –Ü–º'—è: {name}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ –æ—Ñ–æ—Ä–º–ª—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
    )
    
    await message.answer(
        success_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@router.message(F.text == "üßæ –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def quick_order(message: Message):
    """–®–≤–∏–¥–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user_id = message.from_user.id
    cart_items = get_user_cart(user_id)
    
    if not cart_items:
        await message.answer(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!\n\n"
            "–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ—à–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data = get_user_data(user_id)
    if not user_data.get('phone') or not user_data.get('name') or not user_data.get('address'):
        await message.answer(
            "‚ö†Ô∏è <b>–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            "–î–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –≤ —Ä–æ–∑–¥—ñ–ª—ñ \"üë§ –ú–æ—î\".",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="HTML"
        )
        return
    
    total = get_cart_total(user_id)
    
    checkout_text = (
        "üìã <b>–®–≤–∏–¥–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        f"üë§ –Ü–º'—è: {user_data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {user_data.get('address')}\n\n"
        f"üí≥ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: <b>{total} –≥—Ä–Ω</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
    )
    
    await message.answer(
        checkout_text,
        reply_markup=get_checkout_keyboard(),
        parse_mode="HTML"
    )