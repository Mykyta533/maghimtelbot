from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.main_keyboards import get_back_to_menu_keyboard
from keyboards.order_keyboards import get_payment_keyboard, get_order_confirmation_keyboard
from utils.orders import create_order, get_user_orders, process_payment
from utils.cart import get_user_cart, clear_cart, get_cart_total
from utils.loyalty import add_loyalty_points, get_user_loyalty_points

router = Router()

class OrderStates(StatesGroup):
    waiting_contact = State()
    waiting_address = State()
    payment_processing = State()

@router.message(F.text == "üßæ –ó–∞–º–æ–≤–∏—Ç–∏")
async def start_order_process(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user_id = message.from_user.id
    cart_items = get_user_cart(user_id)
    
    if not cart_items:
        await message.answer(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!\n\n"
            "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ—à–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    total = get_cart_total(user_id)
    
    await state.set_state(OrderStates.waiting_contact)
    await state.update_data(total=total)
    
    await message.answer(
        "üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        f"üí≥ –°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>{total} –≥—Ä–Ω</b>\n\n"
        "üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:\n"
        "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380671234567)",
        reply_markup=get_back_to_menu_keyboard()
    )

@router.message(OrderStates.waiting_contact, F.text)
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é":
        await state.clear()
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    phone = message.text.strip()
    if not phone.startswith('+380') or len(phone) != 13:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: +380671234567"
        )
        return
    
    await state.update_data(phone=phone)
    await state.set_state(OrderStates.waiting_address)
    
    await message.answer(
        "üìç –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 15, –∫–≤. 10, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å)"
    )

@router.message(OrderStates.waiting_address, F.text)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é":
        await state.clear()
        return
    
    address = message.text.strip()
    if len(address) < 10:
        await message.answer(
            "‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        return
    
    data = await state.get_data()
    await state.update_data(address=address)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    user_id = message.from_user.id
    cart_items = get_user_cart(user_id)
    
    order_text = "üìã <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
    
    for item in cart_items:
        from utils.catalog import get_product_by_id
        product = get_product_by_id(item['product_id'])
        if product:
            item_total = product['price'] * item['quantity']
            order_text += f"üßº {product['name']} √ó {item['quantity']} = {item_total} –≥—Ä–Ω\n"
    
    order_text += f"\nüí≥ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {data['total']} –≥—Ä–Ω</b>\n"
    order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    order_text += f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n\n"
    order_text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
    
    await message.answer(
        order_text,
        reply_markup=get_order_confirmation_keyboard()
    )

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    await callback.message.edit_text(
        "üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=get_payment_keyboard()
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("pay_"))
async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏"""
    payment_method = callback.data.split("_")[1]
    user_id = callback.from_user.id
    data = await state.get_data()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_id = create_order(
        user_id=user_id,
        phone=data['phone'],
        address=data['address'],
        total=data['total'],
        payment_method=payment_method
    )
    
    if order_id:
        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ (5% –≤—ñ–¥ —Å—É–º–∏)
        loyalty_points = int(data['total'] * 0.05)
        add_loyalty_points(user_id, loyalty_points)
        
        # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
        clear_cart(user_id)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        success_text = (
            "‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>#{order_id}</b>\n"
            f"üí≥ –°—É–º–∞: <b>{data['total']} –≥—Ä–Ω</b>\n"
            f"üí∞ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç–∏: <b>{payment_method}</b>\n\n"
            f"üéÅ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–∞–ª—ñ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ: <b>{loyalty_points}</b>\n\n"
            "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n"
            "–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ CleanWay! üòä"
        )
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_to_menu_keyboard()
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_id = os.getenv('ADMIN_ID')
        if admin_id:
            admin_text = (
                "üîî <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
                f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{callback.from_user.username or '–±–µ–∑ username'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
                f"üí≥ –°—É–º–∞: {data['total']} –≥—Ä–Ω\n"
                f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_method}"
            )
            
            try:
                await callback.bot.send_message(admin_id, admin_text)
            except:
                pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É
        
        await state.clear()
    else:
        await callback.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            show_alert=True
        )

@router.message(F.text == "üßÆ –ú–æ—ó —á–µ–∫–∏")
async def show_user_orders(message: Message):
    """–ü–æ–∫–∞–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    orders = get_user_orders(user_id)
    
    if not orders:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n\n"
            "–û—Ñ–æ—Ä–º—ñ—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤!",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    orders_text = "üßÆ <b>–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
    
    for order in orders[-5:]:  # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–º–æ–≤–ª–µ–Ω—å
        status_emoji = {
            'pending': '‚è≥',
            'processing': 'üîÑ',
            'shipped': 'üöö',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }
        
        orders_text += (
            f"{status_emoji.get(order['status'], 'üìã')} <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['id']}</b>\n"
            f"üí≥ –°—É–º–∞: {order['total']} –≥—Ä–Ω\n"
            f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
        )
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    loyalty_points = get_user_loyalty_points(user_id)
    orders_text += f"üéÅ <b>–í–∞—à—ñ –±–∞–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ: {loyalty_points}</b>\n"
    orders_text += "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–∞–ª–∏ –¥–ª—è –∑–Ω–∏–∂–æ–∫ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–∫—É–ø–∫–∏!"
    
    await message.answer(
        orders_text,
        reply_markup=get_back_to_menu_keyboard()
    )

@router.message(F.text == "üßß –í—ñ–¥–º–æ–≤–∞ –≤—ñ–¥ –ø–∞–ø–µ—Ä–æ–≤–æ–≥–æ —á–µ–∫–∞")
async def toggle_paperless_receipts(message: Message):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —á–µ–∫—ñ–≤"""
    user_id = message.from_user.id
    
    # –¢—É—Ç –±–∏ –±—É–ª–∞ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é
    
    await message.answer(
        "‚úÖ <b>–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ —á–µ–∫–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>\n\n"
        "üå± –î—è–∫—É—î–º–æ –∑–∞ —Ç—É—Ä–±–æ—Ç—É –ø—Ä–æ –¥–æ–≤–∫—ñ–ª–ª—è!\n"
        "üìß –¢–µ–ø–µ—Ä –≤—Å—ñ –≤–∞—à—ñ —á–µ–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ.\n\n"
        "üíö –†–∞–∑–æ–º –º–∏ —Ä–æ–±–∏–º–æ —Å–≤—ñ—Ç —á–∏—Å—Ç—ñ—à–∏–º!",
        reply_markup=get_back_to_menu_keyboard()
    )