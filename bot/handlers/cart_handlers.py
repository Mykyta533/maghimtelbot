from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.cart_keyboards import get_cart_keyboard, get_checkout_keyboard
from keyboards.main_keyboards import get_back_to_menu_inline, get_main_menu  # –î–æ–¥–∞–ª–∏ get_back_to_menu_inline
from keyboards.cart_keyboards import get_cart_keyboard, get_checkout_keyboard, get_order_confirmation_keyboard, get_order_cancel_confirmation_keyboard
from utils.cart import (
    get_user_cart,
    update_cart_item,
    remove_from_cart,
    clear_cart,
    get_cart_total
)
from utils.catalog import get_product_by_id

router = Router()


@router.message(F.text == "üõí –ö–æ—à–∏–∫")
async def show_cart(message: Message):
    user_id = message.from_user.id
    cart_items = get_user_cart(user_id)

    if not cart_items:
        await message.answer(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n"
            "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏!",
            reply_markup=get_back_to_menu_keyboard()
        )
        return

    await send_cart_message(message, cart_items)


@router.callback_query(F.data.startswith("cart_increase_"))
async def increase_cart_item(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id

        cart_items = get_user_cart(user_id)
        current_item = next((item for item in cart_items if item['product_id'] == product_id), None)

        if current_item:
            new_quantity = current_item['quantity'] + 1
            # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            if new_quantity <= 99:  # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∞–º
                update_cart_item(user_id, product_id, new_quantity)
                await update_cart_display(callback)
            else:
                await callback.answer("–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É", show_alert=True)
                return
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É", show_alert=True)
            return

        await callback.answer()
    except (ValueError, IndexError) as e:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É", show_alert=True)


@router.callback_query(F.data.startswith("cart_decrease_"))
async def decrease_cart_item(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id

        cart_items = get_user_cart(user_id)
        current_item = next((item for item in cart_items if item['product_id'] == product_id), None)

        if current_item:
            if current_item['quantity'] > 1:
                new_quantity = current_item['quantity'] - 1
                update_cart_item(user_id, product_id, new_quantity)
            else:
                remove_from_cart(user_id, product_id)

            await update_cart_display(callback)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É", show_alert=True)
            return

        await callback.answer()
    except (ValueError, IndexError) as e:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É", show_alert=True)


@router.callback_query(F.data.startswith("cart_remove_"))
async def remove_cart_item(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id

        remove_from_cart(user_id, product_id)
        await update_cart_display(callback)

        await callback.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞")
    except (ValueError, IndexError) as e:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É", show_alert=True)


@router.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    clear_cart(user_id)

    await callback.message.edit_text(
        "üóë –í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart_items = get_user_cart(user_id)

    if not cart_items:
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
        return

    total = get_cart_total(user_id)

    checkout_text = (
        "üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        f"üí≥ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: <b>{total} –≥—Ä–Ω</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
    )

    await callback.message.edit_text(
        checkout_text,
        reply_markup=get_checkout_keyboard(),
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart_items = get_user_cart(user_id)

    if not cart_items:
        await callback.message.edit_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n"
            "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏!",
            reply_markup=get_back_to_menu_keyboard()
        )
    else:
        await update_cart_display(callback)

    await callback.answer()


@router.callback_query(F.data == "pay_liqpay")
async def pay_liqpay(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîÑ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LiqPay –Ω–∞—Ä–∞–∑—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "pay_wayforpay")
async def pay_wayforpay(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîÑ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WayForPay –Ω–∞—Ä–∞–∑—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n–°–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìÇ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


async def update_cart_display(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart_items = get_user_cart(user_id)

    if not cart_items:
        await callback.message.edit_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n"
            "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏!",
            reply_markup=get_back_to_menu_keyboard()
        )
        return

    await send_cart_message(callback, cart_items)


async def send_cart_message(message_or_callback, cart_items):
    cart_text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
    total = 0

    for item in cart_items:
        product = get_product_by_id(item['product_id'])
        if product:
            item_total = product['price'] * item['quantity']
            total += item_total
            cart_text += (
                f"üì¶ <b>{product['name']}</b>\n"  # –ó–º—ñ–Ω–µ–Ω–æ –µ–º–æ–¥–∑—ñ
                f"üí∞ {product['price']} –≥—Ä–Ω √ó {item['quantity']} —à—Ç = {item_total} –≥—Ä–Ω\n\n"
            )
        else:
            # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            cart_text += (
                f"‚ùå <b>–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>\n"
                f"ID: {item['product_id']} √ó {item['quantity']} —à—Ç\n\n"
            )

    cart_text += f"üí≥ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω</b>"

    try:
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(
                cart_text,
                reply_markup=get_cart_keyboard(cart_items),
                parse_mode="HTML"
            )
        else:
            await message_or_callback.answer(
                cart_text,
                reply_markup=get_cart_keyboard(cart_items),
                parse_mode="HTML"
            )
    except Exception as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ (–¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π logger)
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞: {e}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        error_text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞"
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(
                error_text,
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await message_or_callback.answer(
                error_text,
                reply_markup=get_back_to_menu_keyboard()
            )
            # –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.in_(["payment_header", "order_header", "separator", "separator_main", "cancel_warning"]))
async def ignore_inactive_buttons(callback: CallbackQuery):
    """–Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()

# –û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é
@router.callback_query(F.data == "pay_cash")
async def pay_cash(callback: CallbackQuery):
    await callback.message.edit_text(
        "üíµ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ</b>\n\n"
        "–í–∏ –∑–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.\n"
        "–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–æ—á–Ω—É —Å—É–º—É –∞–±–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.",
        reply_markup=get_order_confirmation_keyboard("cash"),
        parse_mode="HTML"
    )
    await callback.answer()

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@router.callback_query(F.data == "cancel_order")
async def cancel_order_confirm(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ùå <b>–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
        reply_markup=get_order_cancel_confirmation_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
@router.callback_query(F.data == "confirm_cancel_order")
async def confirm_cancel_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    clear_cart(user_id)
    
    await callback.message.edit_text(
        "‚ùå <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
        "–í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
        reply_markup=get_back_to_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç–∏
@router.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order_with_payment(callback: CallbackQuery):
    payment_method = callback.data.split("_", 2)[2]
    user_id = callback.from_user.id
    cart_items = get_user_cart(user_id)
    
    if not cart_items:
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
        return
    
    total = get_cart_total(user_id)
    
    # –¢—É—Ç –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    order_id = f"#{user_id}_{len(str(user_id))}{len(cart_items)}"
    
    payment_text = {
        "cash": "üíµ –ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
        "liqpay": "üí≥ LiqPay", 
        "wayforpay": "üí∞ WayForPay"
    }
    
    success_text = (
        f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!</b>\n\n"
        f"üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {payment_text.get(payment_method, '–ù–µ–≤—ñ–¥–æ–º–∏–π')}\n"
        f"üí∞ –°—É–º–∞: {total} –≥—Ä–Ω\n\n"
        "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
    )
    
    # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    clear_cart(user_id)
    
    await callback.message.edit_text(
        success_text,
        reply_markup=get_back_to_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!")

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
@router.callback_query(F.data.startswith("product_info_"))
async def show_product_info(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])
        product = get_product_by_id(product_id)
        
        if product:
            await callback.answer(
                f"üì¶ {product['name']}\nüí∞ –¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω",
                show_alert=True
            )
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    except (ValueError, IndexError):
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", show_alert=True)
