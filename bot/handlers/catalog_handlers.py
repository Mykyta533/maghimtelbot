from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
import logging

from keyboards.catalog_keyboards import get_product_keyboard, get_categories_keyboard
from keyboards.main_keyboards import get_back_to_menu_keyboard
from utils.catalog import get_products_by_category, get_product_by_id, get_all_categories
from utils.cart import add_to_cart

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üßº –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    try:
        categories = get_all_categories()
        
        if not categories:
            await message.answer(
                "üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        await message.answer(
            "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ CleanWay</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:",
            reply_markup=get_categories_keyboard(categories)
        )
    except Exception as e:
        logger.error(f"Error showing catalog: {e}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        category_id = callback.data.split("_", 1)[1]
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", show_alert=True)
        return
    
    try:
        products = get_products_by_category(category_id)
        
        if not products:
            await callback.answer("–í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä
        await show_product_in_category(callback, products, 0)
        
    except Exception as e:
        logger.error(f"Error showing category products: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤", show_alert=True)

@router.callback_query(F.data.startswith("product_"))
async def show_product_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É"""
    try:
        product_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É", show_alert=True)
        return
    
    try:
        product = get_product_by_id(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await show_single_product(callback, product)
        
    except Exception as e:
        logger.error(f"Error showing product details: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É", show_alert=True)

@router.callback_query(F.data.startswith("nav_"))
async def navigate_products(callback: CallbackQuery):
    """–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –º—ñ–∂ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        _, category_id, index = callback.data.split("_")
        category_id = int(category_id)
        index = int(index)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó", show_alert=True)
        return
    
    try:
        products = get_products_by_category(category_id)
        
        if not products or index < 0 or index >= len(products):
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await show_product_in_category(callback, products, index)
        
    except Exception as e:
        logger.error(f"Error navigating products: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó", show_alert=True)

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_product_to_cart(callback: CallbackQuery):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—à–∏–∫–∞"""
    try:
        product_id = int(callback.data.split("_")[3])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É", show_alert=True)
        return
    
    try:
        user_id = callback.from_user.id
        product = get_product_by_id(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É
        if product.get('stock', 0) <= 0:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è", show_alert=True)
            return
        
        success = add_to_cart(user_id, product_id, 1)
        
        if success:
            await callback.answer(
                f"‚úÖ {product['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!",
                show_alert=True
            )
        else:
            await callback.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞",
                show_alert=True
            )
            
    except Exception as e:
        logger.error(f"Error adding to cart: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞", show_alert=True)

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    try:
        categories = get_all_categories()
        
        if not categories:
            await callback.message.edit_text(
                "üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        await callback.message.edit_text(
            "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ CleanWay</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:",
            reply_markup=get_categories_keyboard(categories)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error returning to catalog: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", show_alert=True)

async def show_product_in_category(callback: CallbackQuery, products: list, index: int):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä—É –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é"""
    product = products[index]
    category_id = product.get('category_id', 1)  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ category_id —î –≤ —Ç–æ–≤–∞—Ä—ñ
    
    text = (
        f"üßº <b>{product['name']}</b>\n\n"
        f"üìù {product['description']}\n\n"
        f"üí∞ <b>–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω</b>\n"
        f"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['stock']} —à—Ç.\n\n"
        f"üìÑ –¢–æ–≤–∞—Ä {index + 1} –∑ {len(products)}"
    )
    
    keyboard = get_product_keyboard(
        product['id'], 
        index, 
        len(products),
        category_id=category_id
    )
    
    await edit_message_with_media(callback, product, text, keyboard)

async def show_single_product(callback: CallbackQuery, product: dict):
    """–ü–æ–∫–∞–∑ –æ–∫—Ä–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
    text = (
        f"üßº <b>{product['name']}</b>\n\n"
        f"üìù {product['description']}\n\n"
        f"üí∞ <b>–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω</b>\n"
        f"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['stock']} —à—Ç."
    )
    
    keyboard = get_product_keyboard(product['id'])
    await edit_message_with_media(callback, product, text, keyboard)

async def edit_message_with_media(callback: CallbackQuery, product: dict, text: str, keyboard):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–¥—ñ–∞ –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º"""
    try:
        # –Ø–∫—â–æ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–µ–¥—ñ–∞
        if product.get('image'):
            await callback.message.edit_media(
                InputMediaPhoto(
                    media=product['image'],
                    caption=text
                ),
                reply_markup=keyboard
            )
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                text,
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error editing message with media: {e}")
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–µ–¥—ñ–∞, —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
        try:
            await callback.message.edit_text(
                text,
                reply_markup=keyboard
            )
        except Exception as e2:
            logger.error(f"Error editing message text: {e2}")
            # –Ø–∫—â–æ —ñ —Ç–µ–∫—Å—Ç –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback.message.answer(
                text,
                reply_markup=keyboard
            )
    
    await callback.answer()
