from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
import logging

from keyboards.catalog_keyboards import get_product_keyboard, get_categories_keyboard
from keyboards.main_keyboards import get_back_to_menu_keyboard
from utils.catalog import get_products_by_category, get_product_by_id, get_all_categories
from utils.cart import add_to_cart

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üßº –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    try:
        categories = get_all_categories()
        
        if not categories:
            await message.answer(
                "üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        await message.answer(
            "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ CleanWay</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:",
            reply_markup=get_categories_keyboard(categories)
        )
    except Exception as e:
        logger.error(f"Error showing catalog: {e}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É",
            reply_markup=get_back_to_menu_keyboard()
        )

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    try:
        category_id = callback.data.split("_", 1)[1]
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", show_alert=True)
        return

    try:
        products = get_products_by_category(category_id)

        if not products:
            await callback.answer("–í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤", show_alert=True)
            return

        await show_product_in_category(callback, products, 0)

    except Exception as e:
        logger.error(f"Error showing category products: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤", show_alert=True)

@router.callback_query(F.data.startswith("product_"))
async def show_product_details(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É", show_alert=True)
        return

    try:
        product = get_product_by_id(product_id)

        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        await show_single_product(callback, product)

    except Exception as e:
        logger.error(f"Error showing product details: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É", show_alert=True)

@router.callback_query(F.data.startswith("nav_"))
async def navigate_products(callback: CallbackQuery):
    try:
        _, category_id, index = callback.data.split("_")
        index = int(index)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó", show_alert=True)
        return

    try:
        products = get_products_by_category(category_id)

        if not products or index < 0 or index >= len(products):
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        await show_product_in_category(callback, products, index)

    except Exception as e:
        logger.error(f"Error navigating products: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó", show_alert=True)

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_product_to_cart(callback: CallbackQuery):
    try:
        # callback_data –≤–∏–≥–ª—è–¥–∞—î —è–∫ "add_to_cart_5"
        product_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É", show_alert=True)
        return

    try:
        user_id = callback.from_user.id
        product = get_product_by_id(product_id)

        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if product.get('stock', 0) <= 0:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è", show_alert=True)
            return

        success = add_to_cart(user_id, product_id, 1)

        if success:
            await callback.answer(f"‚úÖ {product['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!", show_alert=True)
        else:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞", show_alert=True)

    except Exception as e:
        logger.error(f"Error adding to cart: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("order_now_"))
async def order_now_from_catalog(callback: CallbackQuery):
    """–®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∫–∞—Ç–∞–ª–æ–≥—É"""
    try:
        product_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É", show_alert=True)
        return

    try:
        user_id = callback.from_user.id
        product = get_product_by_id(product_id)

        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if product.get('stock', 0) <= 0:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è", show_alert=True)
            return

        # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞
        from utils.cart import add_to_cart, get_cart_total
        success = add_to_cart(user_id, product_id, 1)

        if not success:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        from utils.database import get_user_data
        user_data = get_user_data(user_id)
        
        if not user_data.get('phone') or not user_data.get('name') or not user_data.get('address'):
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
                "–î–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –≤ —Ä–æ–∑–¥—ñ–ª—ñ \"üë§ –ú–æ—î\".",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üë§ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="fill_profile"),
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")
                ]]),
                parse_mode="HTML"
            )
            return

        total = get_cart_total(user_id)
        
        from keyboards.cart_keyboards import get_checkout_keyboard
        checkout_text = (
            f"üìã <b>–®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
            f"üë§ –Ü–º'—è: {user_data.get('name')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}\n"
            f"üìç –ê–¥—Ä–µ—Å–∞: {user_data.get('address')}\n\n"
            f"üí≥ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: <b>{total} –≥—Ä–Ω</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
        )
        
        await callback.message.edit_text(
            checkout_text,
            reply_markup=get_checkout_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")

    except Exception as e:
        logger.error(f"Error in order now: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery):
    try:
        categories = get_all_categories()

        if not categories:
            await callback.message.edit_text(
                "üòî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        await callback.message.edit_text(
            "üõå <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ CleanWay</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:",
            reply_markup=get_categories_keyboard(categories)
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error returning to catalog: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", show_alert=True)

async def show_product_in_category(callback: CallbackQuery, products: list, index: int):
    product = products[index]
    category_id = product.get('category')  # –û—Å—å —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª—é—á

    text = (
        f"üßº <b>{product['name']}</b>\n\n"
        f"üìù {product['description']}\n\n"
        f"üí∞ <b>–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω</b>\n"
        f"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['stock']} —à—Ç.\n\n"
        f"üìÑ –¢–æ–≤–∞—Ä {index + 1} –∑ {len(products)}"
    )

    keyboard = get_product_keyboard(product['id'], index, len(products), category_id=category_id)
    await edit_message_with_media(callback, product, text, keyboard)

async def show_single_product(callback: CallbackQuery, product: dict):
    text = (
        f"üßº <b>{product['name']}</b>\n\n"
        f"üìù {product['description']}\n\n"
        f"üí∞ <b>–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω</b>\n"
        f"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['stock']} —à—Ç."
    )

    keyboard = get_product_keyboard(product['id'])
    await edit_message_with_media(callback, product, text, keyboard)

async def edit_message_with_media(callback: CallbackQuery, product: dict, text: str, keyboard):
    try:
        if product.get('image'):
            await callback.message.edit_media(
                InputMediaPhoto(
                    media=product['image'],
                    caption=text
                ),
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error editing message with media: {e}")
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as e2:
            logger.error(f"Error editing message text: {e2}")
            await callback.message.answer(text, reply_markup=keyboard)

    await callback.answer()
