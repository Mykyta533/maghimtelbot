from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from keyboards.catalog_keyboards import get_catalog_menu, get_product_keyboard, get_categories_keyboard
from keyboards.main_keyboards import get_back_to_menu_keyboard
from utils.catalog import get_products_by_category, get_product_by_id, get_all_categories
from utils.cart import add_to_cart

router = Router()

@router.message(F.text == "üßº –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    categories = get_all_categories()
    
    await message.answer(
        "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ CleanWay</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:",
        reply_markup=get_categories_keyboard(categories)
    )

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    category_id = callback.data.split("_")[1]
    products = get_products_by_category(category_id)
    
    if not products:
        await callback.answer("–í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä
    product = products[0]
    
    text = (
        f"üßº <b>{product['name']}</b>\n\n"
        f"üìù {product['description']}\n\n"
        f"üí∞ <b>–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω</b>\n"
        f"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['stock']} —à—Ç."
    )
    
    try:
        await callback.message.edit_media(
            InputMediaPhoto(
                media=product['image'],
                caption=text
            ),
            reply_markup=get_product_keyboard(product['id'], 0, len(products))
        )
    except:
        await callback.message.edit_text(
            text,
            reply_markup=get_product_keyboard(product['id'], 0, len(products))
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def show_product_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É"""
    product_id = int(callback.data.split("_")[1])
    product = get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = (
        f"üßº <b>{product['name']}</b>\n\n"
        f"üìù {product['description']}\n\n"
        f"üí∞ <b>–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω</b>\n"
        f"üì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {product['stock']} —à—Ç."
    )
    
    try:
        await callback.message.edit_media(
            InputMediaPhoto(
                media=product['image'],
                caption=text
            ),
            reply_markup=get_product_keyboard(product['id'])
        )
    except:
        await callback.message.edit_text(
            text,
            reply_markup=get_product_keyboard(product['id'])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_product_to_cart(callback: CallbackQuery):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—à–∏–∫–∞"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    product = get_product_by_id(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    success = add_to_cart(user_id, product_id, 1)
    
    if success:
        await callback.answer(
            f"‚úÖ {product['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!",
            show_alert=True
        )
    else:
        await callback.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞",
            show_alert=True
        )

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    categories = get_all_categories()
    
    await callback.message.edit_text(
        "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ CleanWay</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:",
        reply_markup=get_categories_keyboard(categories)
    )
    
    await callback.answer()